/*
* Copyright (c) 2002 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:
*
*/


//  INCLUDES
#include "LogsConstants.hrh"
#include <AiwCommon.rh>
#include <AiwGenericParam.hrh>
#include <AiwPoCParameters.hrh>
#include <aknsconstants.hrh>


RESOURCE MENU_PANE r_common_callui_submenu
    {
    items =
        {
        MENU_ITEM
            {
            command = KAiwCmdCall;              //Same ID as in interest.
            txt = "";                           //AIW plugin will override the text set here
            cascade = AIW_INTELLIGENT_CASCADE_ID; //No submenu if only one item in it
            flags = EEikMenuItemSpecific; // Click-To-Call EEikMenuItemSpecificListQuery;
            }
        };
    }


RESOURCE MENU_PANE r_common_poc_submenu
    {
    items =
        {
        MENU_ITEM
            {
            command = KAiwCmdPoC;               //Same ID as in interest.
            txt = "Ptt aiw";                    //AIW plugin will override the text set here.
            cascade = AIW_CASCADE_ID;
            flags = EEikMenuItemSpecific;
            }
        };
    }


RESOURCE MENU_PANE r_common_savetopbk_submenu
    {
    items=
        {
        //NEW impl
        MENU_ITEM  //Add to contacts
            {
            command = KAiwCmdAssign;
            txt = "Pbk2 aiw";                   //AIW plugin will override the text set here.
            cascade = AIW_INTELLIGENT_CASCADE_ID;
            flags = EEikMenuItemSpecificListQuery;
            }        
        };
    }


RESOURCE MENU_PANE r_common_send_message_submenu
    {
    items=
        {
        MENU_ITEM       
            {
            command = ELogsCmdMenuSendUi;
            txt = "<placeholder for SendUI>";
            flags = EEikMenuItemSpecific;
            }
        };
    }
    
RESOURCE MENU_PANE r_common_menu_open_phonebook
    {
    items=
        {
       MENU_ITEM  //Open phonebook
            {
            command = ELogsCmdStartPhonebook;
            txt = qtn_logs_opt_open_phonebook;                  
            }  
        };
    }

    
RESOURCE MENU_PANE r_common_event_menu_edit_calls
    {
    items =
        {
        MENU_ITEM                               //Edit and copy phone number
            {
            cascade=r_common_edit_number_submenu;
            command=ELogsCmdMenuNumberSubMenu;
            txt=qtn_stm_om_use_no;
            flags = EEikMenuItemSpecificListQuery;
            },
        MENU_ITEM                               //Edit and copy poc address
            {
            cascade=r_common_edit_poc_address_submenu;
            command=ELogsCmdMenuPocAddressSubMenu;
            txt=qtn_poc_use_address;
            flags = EEikMenuItemSpecificListQuery;
            },
        MENU_ITEM                               //Edit and copy voip address
            {
            cascade=r_common_edit_voip_address_submenu;
            command=ELogsCmdMenuVoipAddressSubMenu;
            txt=qtn_voip_use_address;
            flags = EEikMenuItemSpecificListQuery;
            }
        };
    }


RESOURCE MENU_PANE r_common_event_menu_delete_events
    {
    items = 
        {

        MENU_ITEM                               //Delete
            {
            command = ELogsCmdMenuDelete;
            txt = qtn_stm_om_delete;
            flags = EEikMenuItemSpecific;
            },
        MENU_ITEM                               //Clear list
            {
            command = ELogsCmdMenuDeleteAll;
            txt = qtn_stm_om_delete_all;
            }
        };
    }


RESOURCE MENU_PANE r_common_edit_number_submenu             //Edit and copy phone number
    {
    items=
        {
        MENU_ITEM { command=ELogsCmdMenuPrependNumber;       txt=qtn_logs_opt_use_prepend; },
        MENU_ITEM { command=ELogsCmdMenuCopyNumber;          txt=qtn_logs_opt_use_copy; }
        };
    }

RESOURCE MENU_PANE r_common_edit_poc_address_submenu        //Edit and copy poc address
    {
    items=
        {
        MENU_ITEM { command=ELogsCmdMenuPrependAddress;      txt=qtn_logs_opt_use_prepend; },
        MENU_ITEM { command=ELogsCmdMenuCopyAddress;         txt=qtn_logs_opt_use_copy; }
        };
    }

RESOURCE MENU_PANE r_common_edit_voip_address_submenu       //Edit and copy voip address
    {
    items=
        {
        MENU_ITEM { command=ELogsCmdMenuPrependAddress;      txt=qtn_logs_opt_use_prepend; },
        MENU_ITEM { command=ELogsCmdMenuCopyAddress;         txt=qtn_logs_opt_use_copy; }
        };
    }

RESOURCE MENU_PANE r_common_show_my_address_menu            //Select key popup menu
    {
    items =
        {
        MENU_ITEM
            {
            command = ELogsCmdShowMyAddress;                 //Show user's voip address
            txt = qtn_voip_show_my_address;
            flags = EEikMenuItemSpecific;
            }
        };
    }


/**
 * For CallUI AIW (voice, video, voip calls)
 */
RESOURCE AIW_INTEREST r_logs_callui_interest
    {
    items=
        {
        // This application is interested in calling from menu.
        AIW_CRITERIA_ITEM
            {
            id              = KAiwCmdCall;                  //serviceCmd used here also as ID
            //id              = KLogsCallUiAiwId;           //Menu item's command id
            serviceCmd      = KAiwCmdCall;                  //AiwCommon.hrh
            serviceClass    = KAiwClassMenu;
            contentType     = "*";
            defaultProvider = 0x101F868E;
            maxProviders    = 1;
            }
        };
    }


/**
 * For PoC AIW (PoC calls)
 */
RESOURCE AIW_INTEREST r_logs_poc_interest
    {
    items=
        {
        AIW_CRITERIA_ITEM
            {
            id              = KAiwCmdPoC;                   //serviceCmd used here also as ID
            //id              = KLogsPoCUiAiwId;            //Menu item's command id (used for binding the criteria item to the placeholder)
            serviceCmd      = KAiwCmdPoC;                   //AIW service command ID for this criteria  (AiwCommon.hrh)
            contentType     = "*";
            serviceClass    = KAiwClassMenu;
            defaultProvider = KS60PoCAiwProviderImplUid;    //AiwPoCParameters.hrh
            maxProviders    = 1;
            }
        };
     }


/**
 * For Save-to-phonebook AIW
 */
RESOURCE AIW_INTEREST r_logs_savetopbk_interest
    {
    items=
        {
        AIW_CRITERIA_ITEM
            {
            id = KAiwCmdAssign;                             //serviceCmd used here also as ID
            serviceCmd = KAiwCmdAssign;
            contentType = EGenericParamContactItemStr;
            serviceClass = KAiwClassMenu;
            maxProviders    = 1;
            }
        };
    }


/**
 * For CBA
 */
RESOURCE CBA r_common_options_back_context
    {
    buttons =
        {
        CBA_BUTTON {id=EAknSoftkeyOptions; txt = text_softkey_option;},
        CBA_BUTTON {id=EAknSoftkeyBack; txt = text_softkey_back; },
        CBA_BUTTON {id=EAknSoftkeyContextOptions; txt = text_softkey_option;}
        };
    }

RESOURCE CBA r_common_options_back_open
    {
    buttons =
        {
        CBA_BUTTON {id=EAknSoftkeyOptions; txt = text_softkey_option;},
        CBA_BUTTON {id=EAknSoftkeyBack; txt = text_softkey_back; },
        CBA_BUTTON {id=ELogsCmdMenuOpen; txt = qtn_msk_open;}
        };
    }

RESOURCE CBA r_common_options_exit_open
    {
    buttons =
        {
        CBA_BUTTON {id=EAknSoftkeyOptions; txt = text_softkey_option;},
        CBA_BUTTON {id=EAknSoftkeyExit; txt = text_softkey_exit; },
        CBA_BUTTON {id=ELogsCmdMenuOpen; txt = qtn_msk_open;} //R_QTN_MSK_OPEN;}
        };
    }

//For Logs event list view 
RESOURCE CBA r_common_options_exit_view
    {
    buttons =
        {
        CBA_BUTTON {id=EAknSoftkeyOptions; txt = text_softkey_option;},
        CBA_BUTTON {id=EAknSoftkeyExit; txt = text_softkey_exit; },
        CBA_BUTTON {id=ELogsCmdMenuDetails; txt = qtn_msk_view;} //qtn_logs_cmd_view ;} 
        };
    }

//For Logs settings view 
RESOURCE CBA r_common_options_back_change
    {
    buttons =
        {
        CBA_BUTTON {id=EAknSoftkeyOptions; txt = text_softkey_option;},
        CBA_BUTTON {id=EAknSoftkeyBack; txt = text_softkey_back; },        
        CBA_BUTTON {id=ELogsCmdChange; txt = qtn_msk_change;} 
        };
    }

// Common toolbar resource 
RESOURCE AVKON_TOOLBAR r_common_toolbar
    {
    flags = KAknToolbarWithoutCba|KAknToolbarFixed;
    items =
        {
        TBAR_CTRL
            {
            type = EAknCtButton;
            id = ELogsCmdSendKeyCall;     
            
            control = AVKON_BUTTON
                {
                flags = KAknButtonSizeFitText; //| KAknButtonReportOnLongPress;
                states =
                    {
                    AVKON_BUTTON_STATE
                        {
                        //txt     = "Voice";  //Icon should always be visible instead of this
                        helptxt = qtn_logs_tb_call;
                        bmpfile = "z:\\Resource\\apps\\logs.mif";
                        bmpid   = EMbmLogsQgn_indi_tb_call;         
                        bmpmask = EMbmLogsQgn_indi_tb_call_mask;
                        extension = r_toolbar_call_button_state_extension;
                        }
                    };
                };
            },
        TBAR_CTRL
            {
            type = EAknCtButton;
            id = ELogsCmdToolBarSendUi;
            control = AVKON_BUTTON
                {
                flags = KAknButtonSizeFitText;
                states =
                    {
                    AVKON_BUTTON_STATE
                        {
                        //txt     = "Send"; //Icon should always be visible instead of this
                        helptxt = qtn_logs_tb_msg;
                        bmpfile = "z:\\Resource\\apps\\logs.mif";
                        bmpid   = EMbmLogsQgn_indi_tb_mce; 
                        bmpmask = EMbmLogsQgn_indi_tb_mce_mask;
                        extension = r_toolbar_write_button_state_extension;
                        }
                    };
                };
            },
        TBAR_CTRL
            {
            type = EAknCtButton;
            id = ELogsCmdStartPhonebook;
            control = AVKON_BUTTON
                {
                flags = KAknButtonSizeFitText;
                states =
                    {
                    AVKON_BUTTON_STATE
                        {
                        // txt     = "Pbk";  //Icon should always be visible instead of this
                        helptxt = qtn_logs_tb_pb;
                        bmpfile = "z:\\Resource\\apps\\logs.mif";
                        bmpid   = EMbmLogsQgn_indi_tb_pb; 
                        bmpmask = EMbmLogsQgn_indi_tb_pb_mask;
                        extension = r_toolbar_pbk_button_state_extension;
                        }
                    };
                };
            }
        };
    }

RESOURCE AVKON_BUTTON_STATE_EXTENSION r_toolbar_call_button_state_extension
    {
    bmbSkinIdMajor= EAknsMajorGeneric;
    bmbSkinIdMinor= EAknsMinorGenericQgnIndiTbCall;
    }  

RESOURCE AVKON_BUTTON_STATE_EXTENSION r_toolbar_write_button_state_extension
    {
    bmbSkinIdMajor= EAknsMajorGeneric;
    bmbSkinIdMinor= EAknsMinorGenericQgnIndiTbMce;
    }

RESOURCE AVKON_BUTTON_STATE_EXTENSION r_toolbar_pbk_button_state_extension
    {
    bmbSkinIdMajor= EAknsMajorGeneric;
    bmbSkinIdMinor= EAknsMinorGenericQgnIndiTbPb;
    }

/**
 *  Common Information note with ok-button
 */
RESOURCE DIALOG r_my_address_query
    {
    flags = EAknInformationNoteFlags;
    buttons = R_AVKON_SOFTKEYS_OK_EMPTY;
    items=
        {
        DLG_LINE
            {
            type = EAknCtNote;
            id = EGeneralNote;
            control= AVKON_NOTE
                {
                layout = ETextualNotificationLayout;
                singular_label = "";
                };
            }
        };
    }




// End of File
